generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  Book      Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  isFiction     Boolean
  datePublished DateTime
  author        Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id        String   @id @unique
  fullName  String
  username  String   @unique
  password  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertiesDistressed {
  id                       String    @id
  formattedAddress         String?
  addressLine1             String?
  addressLine2             String?
  city                     String?
  state                    String?
  zipCode                  String?
  county                   String?
  latitude                 String?
  longitude                String?
  propertyType             String?
  squareFootage            Float?
  lotSize                  String?
  yearBuilt                String?
  assessorID               String?
  legalDescription         String?
  features                 String?
  taxAssessments           String?
  propertyTaxes            String?
  owner                    String?
  ownerOccupied            String?
  subdivision              String?
  lastSaleDate             String?
  lastSalePrice            String?
  history                  String?
  bathrooms                String?
  bedrooms                 String?
  zoning                   String?
  hoa                      String?
  street_view_capture_date DateTime? @db.Date
  process_date             DateTime? @db.Date
  prob_abandoned           Float?
  prob_empty               Float?
  prob_occupied            Float?
  predicted_label          String?   @db.VarChar(50)
  weighted_label           String?   @db.VarChar(50)
  distressed_score         Int?
  attomid                  String?
  construction             String?
  interior                 String?
  pool                     String?
  poolarea                 Float?
  searchaddress            String?
  vacancy                  Boolean?
  foreclosure              Boolean?
  image_url                String?

  @@index([searchaddress(ops: raw("gin_trgm_ops"))], map: "idx_searchaddress_trgm", type: Gin)
  @@index([formattedAddress(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([id])
  @@index([state])
  @@index([zipCode])
  @@map("properties_distressed_duval_test")
}
