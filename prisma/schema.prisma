generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PropertiesDistressed {
  id                       String                  @id
  formattedAddress         String?
  addressLine1             String?
  addressLine2             String?
  city                     String?
  state                    String?
  zipCode                  String?
  county                   String?
  latitude                 String?
  longitude                String?
  propertyType             String?
  squareFootage            Float?
  lotSize                  String?
  yearBuilt                String?
  assessorID               String?
  legalDescription         String?
  features                 String?
  taxAssessments           String?
  propertyTaxes            String?
  owner                    String?
  ownerOccupied            String?
  subdivision              String?
  lastSaleDate             String?
  lastSalePrice            String?
  history                  String?
  bathrooms                String?
  bedrooms                 String?
  zoning                   String?
  hoa                      String?
  street_view_capture_date DateTime?               @db.Date
  process_date             DateTime?               @db.Date
  prob_abandoned           Float?
  prob_empty               Float?
  prob_occupied            Float?
  predicted_label          String?                 @db.VarChar(50)
  weighted_label           String?                 @db.VarChar(50)
  distressed_score         Int?
  attomid                  String?
  construction             String?
  interior                 String?
  pool                     String?
  poolarea                 Float?
  searchaddress            String?
  vacancy                  Boolean?
  foreclosure              Boolean?
  image_url                String?
  user_saved_properties    user_saved_properties[]

  @@index([searchaddress(ops: raw("gin_trgm_ops"))], map: "idx_searchaddress_trgm", type: Gin)
  @@index([formattedAddress(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([id])
  @@index([state])
  @@index([zipCode])
  @@map("properties_distressed_duval_test")
}

model users {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name             String
  username              String                  @unique
  email                 String                  @unique
  password              String
  role                  user_role               @default(USER)
  status                user_status             @default(ACTIVE)
  email_verified        Boolean?                @default(false)
  profile_image         String?
  credits               Int                     @default(0)
  last_login_at         DateTime?               @db.Timestamp(6)
  created_at            DateTime?               @default(now()) @db.Timestamp(6)
  updated_at            DateTime?               @default(now()) @db.Timestamp(6)
  user_saved_buyers     user_saved_buyers[]
  user_saved_properties user_saved_properties[]
}

model cashBuyers {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  address           String?
  city              String?
  zipcode           String?
  state             String?
  user_saved_buyers user_saved_buyers[]

  @@index([city], map: "idx_cash_buyers_city")
  @@index([name], map: "idx_cash_buyers_name")
  @@index([zipcode], map: "idx_cash_buyers_zipcode")
  @@map("cash_buyers")
}

model user_saved_buyers {
  user_id     String     @db.Uuid
  buyer_id    String     @db.Uuid
  saved_at    DateTime?  @default(now()) @db.Timestamp(6)
  cash_buyers cashBuyers @relation(fields: [buyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, buyer_id])
}

model user_saved_properties {
  user_id                          String               @db.Uuid
  property_id                      String
  saved_at                         DateTime?            @default(now()) @db.Timestamp(6)
  properties_distressed_duval_test PropertiesDistressed @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                            users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, property_id])
}

model cash_buyer_submissions {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  address    String?
  phone      String?   @db.VarChar(20)
  email      String?   @db.VarChar(100)
  status     String?   @default("under_review") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

enum user_role {
  ADMIN
  USER
}

enum user_status {
  ACTIVE
  INACTIVE
  DELETED
}
